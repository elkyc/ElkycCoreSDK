#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef ELKYCCORESDK_SWIFT_H
#define ELKYCCORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ElkycCoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
enum BannerStyle : NSInteger;
@class UIColor;

SWIFT_PROTOCOL("_TtP12ElkycCoreSDK20BannerColorsProtocol_")
@protocol BannerColorsProtocol
- (UIColor * _Nonnull)colorFor:(enum BannerStyle)style SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK21BannerHapticGenerator")
@interface BannerHapticGenerator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BannerPosition, open) {
  BannerPositionBottom = 0,
  BannerPositionTop = 1,
};

typedef SWIFT_ENUM(NSInteger, BannerStyle, open) {
  BannerStyleDanger = 0,
  BannerStyleInfo = 1,
  BannerStyleCustomView = 2,
  BannerStyleSuccess = 3,
  BannerStyleWarning = 4,
};

@class NSString;
@class UILabel;
@class NotificationBannerQueue;
@class NSCoder;
enum QueuePosition : NSInteger;
@class UIViewController;

SWIFT_CLASS("_TtC12ElkycCoreSDK22BaseNotificationBanner")
@interface BaseNotificationBanner : UIView
/// Notification that will be posted when a notification banner will appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerWillAppear;)
+ (NSNotificationName _Nonnull)BannerWillAppear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner did appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerDidAppear;)
+ (NSNotificationName _Nonnull)BannerDidAppear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner will appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerWillDisappear;)
+ (NSNotificationName _Nonnull)BannerWillDisappear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner did appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerDidDisappear;)
+ (NSNotificationName _Nonnull)BannerDidDisappear SWIFT_WARN_UNUSED_RESULT;
/// Notification banner object key that is included with each Notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BannerObjectKey;)
+ (NSString * _Nonnull)BannerObjectKey SWIFT_WARN_UNUSED_RESULT;
/// The style of the notification banner
@property (nonatomic, readonly) enum BannerStyle style;
/// The height of the banner when it is presented
@property (nonatomic) CGFloat bannerHeight;
/// The topmost label of the notification if a custom view is not desired
@property (nonatomic, readonly, strong) UILabel * _Nullable titleLabel;
/// The time before the notificaiton is automatically dismissed
@property (nonatomic) NSTimeInterval duration;
/// If false, the banner will not be dismissed until the developer programatically dismisses it
@property (nonatomic) BOOL autoDismiss;
/// The transparency of the background of the notification banner
@property (nonatomic) CGFloat transparency;
/// If true, notification will dismissed when tapped
@property (nonatomic) BOOL dismissOnTap;
/// If true, notification will dismissed when swiped up
@property (nonatomic) BOOL dismissOnSwipeUp;
/// Closure that will be executed if the notification banner is tapped
@property (nonatomic, copy) void (^ _Nullable onTap)(void);
/// Closure that will be executed if the notification banner is swiped up
@property (nonatomic, copy) void (^ _Nullable onSwipeUp)(void);
/// Responsible for positioning and auto managing notification banners
@property (nonatomic, strong) NotificationBannerQueue * _Nonnull bannerQueue;
/// Banner show and dimiss animation duration
@property (nonatomic) NSTimeInterval animationDuration;
/// Wether or not the notification banner is currently being displayed
@property (nonatomic) BOOL isDisplaying;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Places a NotificationBanner on the queue and shows it if its the first one in the queue
/// \param queuePosition The position to show the notification banner. If the position is .front, the
/// banner will be displayed immediately
///
/// \param bannerPosition The position the notification banner should slide in from
///
/// \param queue The queue to display the notification banner on. It is up to the developer
/// to manage multiple banner queues and prevent any conflicts that may occur.
///
/// \param viewController The view controller to display the notifification banner on. If nil, it will
/// be placed on the main app window
///
- (void)showWithQueuePosition:(enum QueuePosition)queuePosition bannerPosition:(enum BannerPosition)bannerPosition queue:(NotificationBannerQueue * _Nonnull)queue on:(UIViewController * _Nullable)viewController;
/// Resets a notification banner’s elapsed duration to zero.
- (void)resetDuration;
/// Dismisses the NotificationBanner and shows the next one if there is one to show on the queue
- (void)dismissWithForced:(BOOL)forced;
/// Removes the NotificationBanner from the queue if not displaying
- (void)remove;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK25BindableGestureRecognizer")
@interface BindableGestureRecognizer : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end



@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@class NSBundle;

SWIFT_CLASS("_TtC12ElkycCoreSDK31CountryCodePickerViewController") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CountryCodePickerViewController : UITableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CountryCodePickerViewController (SWIFT_EXTENSION(ElkycCoreSDK))
@end

@class UISearchController;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CountryCodePickerViewController (SWIFT_EXTENSION(ElkycCoreSDK)) <UISearchResultsUpdating>
- (void)updateSearchResultsForSearchController:(UISearchController * _Nonnull)searchController;
@end



/// This class is used internally by other frameworks
/// warning:
/// Class is not for public usage
SWIFT_CLASS("_TtC12ElkycCoreSDK23ElkycFlowViewController")
@interface ElkycFlowViewController : UINavigationController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK25GrowingNotificationBanner")
@interface GrowingNotificationBanner : BaseNotificationBanner
/// The height of the banner when it is presented
@property (nonatomic) CGFloat bannerHeight;
/// The bottom most label of the notification if a subtitle is provided
@property (nonatomic, readonly, strong) UILabel * _Nullable subtitleLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK26FloatingNotificationBanner")
@interface FloatingNotificationBanner : GrowingNotificationBanner
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC12ElkycCoreSDK16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(ElkycCoreSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIWindow;
@class CAAnimation;
@class CALayer;
@class NSNotification;
@class UIGestureRecognizer;
@class NSAttributedString;
@class UIFont;

IB_DESIGNABLE
SWIFT_CLASS("_TtC12ElkycCoreSDK12MarqueeLabel")
@interface MarqueeLabel : UILabel <CAAnimationDelegate>
/// A boolean property that sets whether the <code>MarqueeLabel</code> should behave like a normal <code>UILabel</code>.
/// When set to <code>true</code> the <code>MarqueeLabel</code> will behave and look like a normal <code>UILabel</code>, and  will not begin any scrolling animations.
/// Changes to this property take effect immediately, removing any in-flight animation as well as any edge fade. Note that <code>MarqueeLabel</code>
/// will respect the current values of the <code>lineBreakMode</code> and <code>textAlignment</code>properties while labelized.
/// To simply prevent automatic scrolling, use the <code>holdScrolling</code> property.
/// Defaults to <code>false</code>.
/// seealso:
/// holdScrolling
/// seealso:
/// lineBreakMode
/// note:
/// The label will not automatically scroll when this property is set to <code>true</code>.
/// warning:
/// The UILabel default setting for the <code>lineBreakMode</code> property is <code>NSLineBreakByTruncatingTail</code>, which truncates
/// the text adds an ellipsis glyph (…). Set the <code>lineBreakMode</code> property to <code>NSLineBreakByClipping</code> in order to avoid the
/// ellipsis, especially if using an edge transparency fade.
@property (nonatomic) IBInspectable BOOL labelize;
/// A boolean property that sets whether the <code>MarqueeLabel</code> should hold (prevent) automatic label scrolling.
/// When set to <code>true</code>, <code>MarqueeLabel</code> will not automatically scroll even its text is larger than the specified frame,
/// although the specified edge fades will remain.
/// To set <code>MarqueeLabel</code> to act like a normal UILabel, use the <code>labelize</code> property.
/// Defaults to <code>false</code>.
/// note:
/// The label will not automatically scroll when this property is set to <code>true</code>.
/// seealso:
/// labelize
@property (nonatomic) IBInspectable BOOL holdScrolling;
/// A boolean property that sets whether the <code>MarqueeLabel</code> should only begin a scroll when tapped.
/// If this property is set to <code>true</code>, the <code>MarqueeLabel</code> will only begin a scroll animation cycle when tapped. The label will
/// not automatically being a scroll. This setting overrides the setting of the <code>holdScrolling</code> property.
/// Defaults to <code>false</code>.
/// note:
/// The label will not automatically scroll when this property is set to <code>false</code>.
/// seealso:
/// holdScrolling
@property (nonatomic) IBInspectable BOOL tapToScroll;
@property (nonatomic) IBInspectable CGFloat scrollDuration SWIFT_DEPRECATED_MSG("Use speed property instead");
@property (nonatomic) IBInspectable CGFloat scrollRate SWIFT_DEPRECATED_MSG("Use speed property instead");
/// A buffer (offset) between the leading edge of the label text and the label frame.
/// This property adds additional space between the leading edge of the label text and the label frame. The
/// leading edge is the edge of the label text facing the direction of scroll (i.e. the edge that animates
/// offscreen first during scrolling).
/// Defaults to <code>0</code>.
/// note:
/// The value set to this property affects label positioning at all times (including when <code>labelize</code> is set to <code>true</code>),
/// including when the text string length is short enough that the label does not need to scroll.
/// note:
/// For Continuous-type labels, the smallest value of <code>leadingBuffer</code>, <code>trailingBuffer</code>, and <code>fadeLength</code>
/// is used as spacing between the two label instances. Zero is an allowable value for all three properties.
/// seealso:
/// trailingBuffer
@property (nonatomic) IBInspectable CGFloat leadingBuffer;
/// A buffer (offset) between the trailing edge of the label text and the label frame.
/// This property adds additional space (buffer) between the trailing edge of the label text and the label frame. The
/// trailing edge is the edge of the label text facing away from the direction of scroll (i.e. the edge that animates
/// offscreen last during scrolling).
/// Defaults to <code>0</code>.
/// note:
/// The value set to this property has no effect when the <code>labelize</code> property is set to <code>true</code>.
/// note:
/// For Continuous-type labels, the smallest value of <code>leadingBuffer</code>, <code>trailingBuffer</code>, and <code>fadeLength</code>
/// is used as spacing between the two label instances. Zero is an allowable value for all three properties.
/// seealso:
/// leadingBuffer
@property (nonatomic) IBInspectable CGFloat trailingBuffer;
/// The length of transparency fade at the left and right edges of the frame.
/// This propery sets the size (in points) of the view edge transparency fades on the left and right edges of a <code>MarqueeLabel</code>. The
/// transparency fades from an alpha of 1.0 (fully visible) to 0.0 (fully transparent) over this distance. Values set to this property
/// will be sanitized to prevent a fade length greater than 1/2 of the frame width.
/// Defaults to <code>0</code>.
@property (nonatomic) IBInspectable CGFloat fadeLength;
/// The length of delay in seconds that the label pauses at the completion of a scroll.
@property (nonatomic) IBInspectable CGFloat animationDelay;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a newly initialized <code>MarqueeLabel</code> instance.
/// The default scroll duration of 7.0 seconds and fade length of 0.0 are used.
/// \param frame A rectangle specifying the initial location and size of the view in its superview’s coordinates. Text (for the given font, font size, etc.) that does not fit in this frame will automatically scroll.
///
///
/// returns:
/// An initialized <code>MarqueeLabel</code> object or nil if the object couldn’t be created.
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)awakeFromNib;
- (void)prepareForInterfaceBuilder SWIFT_AVAILABILITY(ios,introduced=8.0);
- (void)layoutSubviews;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didMoveToWindow;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)drawLayer:(CALayer * _Nonnull)layer inContext:(CGContextRef _Nonnull)ctx;
- (void)restartForViewController:(NSNotification * _Nonnull)notification;
- (void)labelizeForController:(NSNotification * _Nonnull)notification;
- (void)animateForController:(NSNotification * _Nonnull)notification;
/// Immediately resets the label to the home position, cancelling any in-flight scroll animation, and restarts the scroll animation if the appropriate conditions are met.
/// seealso:
/// resetLabel
/// seealso:
/// triggerScrollStart
- (void)restartLabel;
/// Immediately resets the label to the home position, cancelling any in-flight scroll animation.
/// The text is immediately returned to the home position. Scrolling will not resume automatically after a call to this method.
/// To re-initiate scrolling use a call to <code>restartLabel</code> or <code>triggerScrollStart</code>, or make a change to a UILabel property such as text, bounds/frame,
/// font, font size, etc.
/// seealso:
/// restartLabel
/// seealso:
/// triggerScrollStart
- (void)shutdownLabel;
- (void)labelWasTapped:(UIGestureRecognizer * _Nonnull)recognizer;
- (UIView * _Nonnull)viewForBaselineLayout SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic, strong) UIFont * _Null_unspecified font;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic, strong) UIColor * _Nullable highlightedTextColor;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic) NSInteger numberOfLines;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) CGFloat minimumScaleFactor;
@property (nonatomic) UIBaselineAdjustment baselineAdjustment;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)tintColorDidChange;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL isAccessibilityElement;
@end





SWIFT_CLASS("_TtC12ElkycCoreSDK18NotificationBanner")
@interface NotificationBanner : BaseNotificationBanner
/// The bottom most label of the notification if a subtitle is provided
@property (nonatomic, readonly, strong) MarqueeLabel * _Nullable subtitleLabel;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title subtitle:(NSString * _Nullable)subtitle leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle attributedSubtitle:(NSAttributedString * _Nullable)attributedSubtitle leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK23NotificationBannerQueue")
@interface NotificationBannerQueue : NSObject
/// The default instance of the NotificationBannerQueue
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) NotificationBannerQueue * _Nonnull default_;)
+ (NotificationBannerQueue * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// The current number of notification banners on the queue
@property (nonatomic, readonly) NSInteger numberOfBanners;
- (nonnull instancetype)initWithMaxBannersOnScreenSimultaneously:(NSInteger)maxBannersOnScreenSimultaneously OBJC_DESIGNATED_INITIALIZER;
/// Removes all notification banners from the queue
- (void)removeAll;
/// Forced dissmiss all notification banners from the queue
- (void)dismissAllForced;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK20PhoneNumberFormatter")
@interface PhoneNumberFormatter : NSFormatter
@property (nonatomic) BOOL generatesPhoneNumber;
/// Override region to set a custom region. Automatically uses the default region code.
@property (nonatomic, copy) NSString * _Nonnull defaultRegion;
@property (nonatomic) BOOL withPrefix;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentRegion;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PhoneNumberFormatter (SWIFT_EXTENSION(ElkycCoreSDK))
- (NSString * _Nullable)stringForObjectValue:(id _Nullable)obj SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getObjectValue:(id _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPartialStringValid:(NSString * _Nonnull * _Nonnull)partialStringPtr proposedSelectedRange:(NSRangePointer _Nullable)proposedSelRangePtr originalString:(NSString * _Nonnull)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK14PhoneNumberKit")
@interface PhoneNumberKit : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Custom text field that formats phone numbers
SWIFT_CLASS("_TtC12ElkycCoreSDK20PhoneNumberTextField")
@interface PhoneNumberTextField : UITextField <UITextFieldDelegate>
/// Override setText so number will be automatically formatted when setting text by code
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) id <UITextFieldDelegate> _Nullable delegate;
- (void)layoutSubviews;
/// Init with frame
/// \param frame UITextfield F
///
///
/// returns:
/// UITextfield
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Init with coder
/// \param aDecoder decoder
///
///
/// returns:
/// UITextfield
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, QueuePosition, open) {
  QueuePositionBack = 0,
  QueuePositionFront = 1,
};


SWIFT_CLASS("_TtC12ElkycCoreSDK22ServicesViewController")
@interface ServicesViewController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK27StatusBarNotificationBanner")
@interface StatusBarNotificationBanner : BaseNotificationBanner
@property (nonatomic) CGFloat bannerHeight;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK14TextFieldInset")
@interface TextFieldInset : UITextField
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

















SWIFT_CLASS("_TtC12ElkycCoreSDK23ZVActivityIndicatorView")
@interface ZVActivityIndicatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



@interface ZVActivityIndicatorView (SWIFT_EXTENSION(ElkycCoreSDK))
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK15ZVIndicatorView")
@interface ZVIndicatorView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZVIndicatorView (SWIFT_EXTENSION(ElkycCoreSDK))
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK13ZVProgressHUD")
@interface ZVProgressHUD : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end











#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef ELKYCCORESDK_SWIFT_H
#define ELKYCCORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ElkycCoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
enum BannerStyle : NSInteger;
@class UIColor;

SWIFT_PROTOCOL("_TtP12ElkycCoreSDK20BannerColorsProtocol_")
@protocol BannerColorsProtocol
- (UIColor * _Nonnull)colorFor:(enum BannerStyle)style SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK21BannerHapticGenerator")
@interface BannerHapticGenerator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BannerPosition, open) {
  BannerPositionBottom = 0,
  BannerPositionTop = 1,
};

typedef SWIFT_ENUM(NSInteger, BannerStyle, open) {
  BannerStyleDanger = 0,
  BannerStyleInfo = 1,
  BannerStyleCustomView = 2,
  BannerStyleSuccess = 3,
  BannerStyleWarning = 4,
};

@class NSString;
@class UILabel;
@class NotificationBannerQueue;
@class NSCoder;
enum QueuePosition : NSInteger;
@class UIViewController;

SWIFT_CLASS("_TtC12ElkycCoreSDK22BaseNotificationBanner")
@interface BaseNotificationBanner : UIView
/// Notification that will be posted when a notification banner will appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerWillAppear;)
+ (NSNotificationName _Nonnull)BannerWillAppear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner did appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerDidAppear;)
+ (NSNotificationName _Nonnull)BannerDidAppear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner will appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerWillDisappear;)
+ (NSNotificationName _Nonnull)BannerWillDisappear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner did appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerDidDisappear;)
+ (NSNotificationName _Nonnull)BannerDidDisappear SWIFT_WARN_UNUSED_RESULT;
/// Notification banner object key that is included with each Notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BannerObjectKey;)
+ (NSString * _Nonnull)BannerObjectKey SWIFT_WARN_UNUSED_RESULT;
/// The style of the notification banner
@property (nonatomic, readonly) enum BannerStyle style;
/// The height of the banner when it is presented
@property (nonatomic) CGFloat bannerHeight;
/// The topmost label of the notification if a custom view is not desired
@property (nonatomic, readonly, strong) UILabel * _Nullable titleLabel;
/// The time before the notificaiton is automatically dismissed
@property (nonatomic) NSTimeInterval duration;
/// If false, the banner will not be dismissed until the developer programatically dismisses it
@property (nonatomic) BOOL autoDismiss;
/// The transparency of the background of the notification banner
@property (nonatomic) CGFloat transparency;
/// If true, notification will dismissed when tapped
@property (nonatomic) BOOL dismissOnTap;
/// If true, notification will dismissed when swiped up
@property (nonatomic) BOOL dismissOnSwipeUp;
/// Closure that will be executed if the notification banner is tapped
@property (nonatomic, copy) void (^ _Nullable onTap)(void);
/// Closure that will be executed if the notification banner is swiped up
@property (nonatomic, copy) void (^ _Nullable onSwipeUp)(void);
/// Responsible for positioning and auto managing notification banners
@property (nonatomic, strong) NotificationBannerQueue * _Nonnull bannerQueue;
/// Banner show and dimiss animation duration
@property (nonatomic) NSTimeInterval animationDuration;
/// Wether or not the notification banner is currently being displayed
@property (nonatomic) BOOL isDisplaying;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Places a NotificationBanner on the queue and shows it if its the first one in the queue
/// \param queuePosition The position to show the notification banner. If the position is .front, the
/// banner will be displayed immediately
///
/// \param bannerPosition The position the notification banner should slide in from
///
/// \param queue The queue to display the notification banner on. It is up to the developer
/// to manage multiple banner queues and prevent any conflicts that may occur.
///
/// \param viewController The view controller to display the notifification banner on. If nil, it will
/// be placed on the main app window
///
- (void)showWithQueuePosition:(enum QueuePosition)queuePosition bannerPosition:(enum BannerPosition)bannerPosition queue:(NotificationBannerQueue * _Nonnull)queue on:(UIViewController * _Nullable)viewController;
/// Resets a notification banner’s elapsed duration to zero.
- (void)resetDuration;
/// Dismisses the NotificationBanner and shows the next one if there is one to show on the queue
- (void)dismissWithForced:(BOOL)forced;
/// Removes the NotificationBanner from the queue if not displaying
- (void)remove;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK25BindableGestureRecognizer")
@interface BindableGestureRecognizer : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end



@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@class NSBundle;

SWIFT_CLASS("_TtC12ElkycCoreSDK31CountryCodePickerViewController") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CountryCodePickerViewController : UITableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CountryCodePickerViewController (SWIFT_EXTENSION(ElkycCoreSDK))
@end

@class UISearchController;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CountryCodePickerViewController (SWIFT_EXTENSION(ElkycCoreSDK)) <UISearchResultsUpdating>
- (void)updateSearchResultsForSearchController:(UISearchController * _Nonnull)searchController;
@end



/// This class is used internally by other frameworks
/// warning:
/// Class is not for public usage
SWIFT_CLASS("_TtC12ElkycCoreSDK23ElkycFlowViewController")
@interface ElkycFlowViewController : UINavigationController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK25GrowingNotificationBanner")
@interface GrowingNotificationBanner : BaseNotificationBanner
/// The height of the banner when it is presented
@property (nonatomic) CGFloat bannerHeight;
/// The bottom most label of the notification if a subtitle is provided
@property (nonatomic, readonly, strong) UILabel * _Nullable subtitleLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK26FloatingNotificationBanner")
@interface FloatingNotificationBanner : GrowingNotificationBanner
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC12ElkycCoreSDK16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(ElkycCoreSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIWindow;
@class CAAnimation;
@class CALayer;
@class NSNotification;
@class UIGestureRecognizer;
@class NSAttributedString;
@class UIFont;

IB_DESIGNABLE
SWIFT_CLASS("_TtC12ElkycCoreSDK12MarqueeLabel")
@interface MarqueeLabel : UILabel <CAAnimationDelegate>
/// A boolean property that sets whether the <code>MarqueeLabel</code> should behave like a normal <code>UILabel</code>.
/// When set to <code>true</code> the <code>MarqueeLabel</code> will behave and look like a normal <code>UILabel</code>, and  will not begin any scrolling animations.
/// Changes to this property take effect immediately, removing any in-flight animation as well as any edge fade. Note that <code>MarqueeLabel</code>
/// will respect the current values of the <code>lineBreakMode</code> and <code>textAlignment</code>properties while labelized.
/// To simply prevent automatic scrolling, use the <code>holdScrolling</code> property.
/// Defaults to <code>false</code>.
/// seealso:
/// holdScrolling
/// seealso:
/// lineBreakMode
/// note:
/// The label will not automatically scroll when this property is set to <code>true</code>.
/// warning:
/// The UILabel default setting for the <code>lineBreakMode</code> property is <code>NSLineBreakByTruncatingTail</code>, which truncates
/// the text adds an ellipsis glyph (…). Set the <code>lineBreakMode</code> property to <code>NSLineBreakByClipping</code> in order to avoid the
/// ellipsis, especially if using an edge transparency fade.
@property (nonatomic) IBInspectable BOOL labelize;
/// A boolean property that sets whether the <code>MarqueeLabel</code> should hold (prevent) automatic label scrolling.
/// When set to <code>true</code>, <code>MarqueeLabel</code> will not automatically scroll even its text is larger than the specified frame,
/// although the specified edge fades will remain.
/// To set <code>MarqueeLabel</code> to act like a normal UILabel, use the <code>labelize</code> property.
/// Defaults to <code>false</code>.
/// note:
/// The label will not automatically scroll when this property is set to <code>true</code>.
/// seealso:
/// labelize
@property (nonatomic) IBInspectable BOOL holdScrolling;
/// A boolean property that sets whether the <code>MarqueeLabel</code> should only begin a scroll when tapped.
/// If this property is set to <code>true</code>, the <code>MarqueeLabel</code> will only begin a scroll animation cycle when tapped. The label will
/// not automatically being a scroll. This setting overrides the setting of the <code>holdScrolling</code> property.
/// Defaults to <code>false</code>.
/// note:
/// The label will not automatically scroll when this property is set to <code>false</code>.
/// seealso:
/// holdScrolling
@property (nonatomic) IBInspectable BOOL tapToScroll;
@property (nonatomic) IBInspectable CGFloat scrollDuration SWIFT_DEPRECATED_MSG("Use speed property instead");
@property (nonatomic) IBInspectable CGFloat scrollRate SWIFT_DEPRECATED_MSG("Use speed property instead");
/// A buffer (offset) between the leading edge of the label text and the label frame.
/// This property adds additional space between the leading edge of the label text and the label frame. The
/// leading edge is the edge of the label text facing the direction of scroll (i.e. the edge that animates
/// offscreen first during scrolling).
/// Defaults to <code>0</code>.
/// note:
/// The value set to this property affects label positioning at all times (including when <code>labelize</code> is set to <code>true</code>),
/// including when the text string length is short enough that the label does not need to scroll.
/// note:
/// For Continuous-type labels, the smallest value of <code>leadingBuffer</code>, <code>trailingBuffer</code>, and <code>fadeLength</code>
/// is used as spacing between the two label instances. Zero is an allowable value for all three properties.
/// seealso:
/// trailingBuffer
@property (nonatomic) IBInspectable CGFloat leadingBuffer;
/// A buffer (offset) between the trailing edge of the label text and the label frame.
/// This property adds additional space (buffer) between the trailing edge of the label text and the label frame. The
/// trailing edge is the edge of the label text facing away from the direction of scroll (i.e. the edge that animates
/// offscreen last during scrolling).
/// Defaults to <code>0</code>.
/// note:
/// The value set to this property has no effect when the <code>labelize</code> property is set to <code>true</code>.
/// note:
/// For Continuous-type labels, the smallest value of <code>leadingBuffer</code>, <code>trailingBuffer</code>, and <code>fadeLength</code>
/// is used as spacing between the two label instances. Zero is an allowable value for all three properties.
/// seealso:
/// leadingBuffer
@property (nonatomic) IBInspectable CGFloat trailingBuffer;
/// The length of transparency fade at the left and right edges of the frame.
/// This propery sets the size (in points) of the view edge transparency fades on the left and right edges of a <code>MarqueeLabel</code>. The
/// transparency fades from an alpha of 1.0 (fully visible) to 0.0 (fully transparent) over this distance. Values set to this property
/// will be sanitized to prevent a fade length greater than 1/2 of the frame width.
/// Defaults to <code>0</code>.
@property (nonatomic) IBInspectable CGFloat fadeLength;
/// The length of delay in seconds that the label pauses at the completion of a scroll.
@property (nonatomic) IBInspectable CGFloat animationDelay;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns a newly initialized <code>MarqueeLabel</code> instance.
/// The default scroll duration of 7.0 seconds and fade length of 0.0 are used.
/// \param frame A rectangle specifying the initial location and size of the view in its superview’s coordinates. Text (for the given font, font size, etc.) that does not fit in this frame will automatically scroll.
///
///
/// returns:
/// An initialized <code>MarqueeLabel</code> object or nil if the object couldn’t be created.
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)awakeFromNib;
- (void)prepareForInterfaceBuilder SWIFT_AVAILABILITY(ios,introduced=8.0);
- (void)layoutSubviews;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didMoveToWindow;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)drawLayer:(CALayer * _Nonnull)layer inContext:(CGContextRef _Nonnull)ctx;
- (void)restartForViewController:(NSNotification * _Nonnull)notification;
- (void)labelizeForController:(NSNotification * _Nonnull)notification;
- (void)animateForController:(NSNotification * _Nonnull)notification;
/// Immediately resets the label to the home position, cancelling any in-flight scroll animation, and restarts the scroll animation if the appropriate conditions are met.
/// seealso:
/// resetLabel
/// seealso:
/// triggerScrollStart
- (void)restartLabel;
/// Immediately resets the label to the home position, cancelling any in-flight scroll animation.
/// The text is immediately returned to the home position. Scrolling will not resume automatically after a call to this method.
/// To re-initiate scrolling use a call to <code>restartLabel</code> or <code>triggerScrollStart</code>, or make a change to a UILabel property such as text, bounds/frame,
/// font, font size, etc.
/// seealso:
/// restartLabel
/// seealso:
/// triggerScrollStart
- (void)shutdownLabel;
- (void)labelWasTapped:(UIGestureRecognizer * _Nonnull)recognizer;
- (UIView * _Nonnull)viewForBaselineLayout SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
@property (nonatomic, strong) UIFont * _Null_unspecified font;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic, strong) UIColor * _Nullable highlightedTextColor;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic) NSInteger numberOfLines;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) CGFloat minimumScaleFactor;
@property (nonatomic) UIBaselineAdjustment baselineAdjustment;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)tintColorDidChange;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL isAccessibilityElement;
@end





SWIFT_CLASS("_TtC12ElkycCoreSDK18NotificationBanner")
@interface NotificationBanner : BaseNotificationBanner
/// The bottom most label of the notification if a subtitle is provided
@property (nonatomic, readonly, strong) MarqueeLabel * _Nullable subtitleLabel;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title subtitle:(NSString * _Nullable)subtitle leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle attributedSubtitle:(NSAttributedString * _Nullable)attributedSubtitle leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK23NotificationBannerQueue")
@interface NotificationBannerQueue : NSObject
/// The default instance of the NotificationBannerQueue
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) NotificationBannerQueue * _Nonnull default_;)
+ (NotificationBannerQueue * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// The current number of notification banners on the queue
@property (nonatomic, readonly) NSInteger numberOfBanners;
- (nonnull instancetype)initWithMaxBannersOnScreenSimultaneously:(NSInteger)maxBannersOnScreenSimultaneously OBJC_DESIGNATED_INITIALIZER;
/// Removes all notification banners from the queue
- (void)removeAll;
/// Forced dissmiss all notification banners from the queue
- (void)dismissAllForced;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK20PhoneNumberFormatter")
@interface PhoneNumberFormatter : NSFormatter
@property (nonatomic) BOOL generatesPhoneNumber;
/// Override region to set a custom region. Automatically uses the default region code.
@property (nonatomic, copy) NSString * _Nonnull defaultRegion;
@property (nonatomic) BOOL withPrefix;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentRegion;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PhoneNumberFormatter (SWIFT_EXTENSION(ElkycCoreSDK))
- (NSString * _Nullable)stringForObjectValue:(id _Nullable)obj SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getObjectValue:(id _Nullable * _Nullable)obj forString:(NSString * _Nonnull)string errorDescription:(NSString * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPartialStringValid:(NSString * _Nonnull * _Nonnull)partialStringPtr proposedSelectedRange:(NSRangePointer _Nullable)proposedSelRangePtr originalString:(NSString * _Nonnull)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK14PhoneNumberKit")
@interface PhoneNumberKit : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Custom text field that formats phone numbers
SWIFT_CLASS("_TtC12ElkycCoreSDK20PhoneNumberTextField")
@interface PhoneNumberTextField : UITextField <UITextFieldDelegate>
/// Override setText so number will be automatically formatted when setting text by code
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) id <UITextFieldDelegate> _Nullable delegate;
- (void)layoutSubviews;
/// Init with frame
/// \param frame UITextfield F
///
///
/// returns:
/// UITextfield
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Init with coder
/// \param aDecoder decoder
///
///
/// returns:
/// UITextfield
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, QueuePosition, open) {
  QueuePositionBack = 0,
  QueuePositionFront = 1,
};


SWIFT_CLASS("_TtC12ElkycCoreSDK22ServicesViewController")
@interface ServicesViewController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ElkycCoreSDK27StatusBarNotificationBanner")
@interface StatusBarNotificationBanner : BaseNotificationBanner
@property (nonatomic) CGFloat bannerHeight;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK14TextFieldInset")
@interface TextFieldInset : UITextField
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

















SWIFT_CLASS("_TtC12ElkycCoreSDK23ZVActivityIndicatorView")
@interface ZVActivityIndicatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



@interface ZVActivityIndicatorView (SWIFT_EXTENSION(ElkycCoreSDK))
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK15ZVIndicatorView")
@interface ZVIndicatorView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZVIndicatorView (SWIFT_EXTENSION(ElkycCoreSDK))
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@end



SWIFT_CLASS("_TtC12ElkycCoreSDK13ZVProgressHUD")
@interface ZVProgressHUD : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end











#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
